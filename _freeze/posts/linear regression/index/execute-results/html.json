{
  "hash": "4a767ebac54d93e040b054b15b0f8327",
  "result": {
    "markdown": "---\ntitle: \"Linear Regression\"\nauthor: \"Steven\"\ndate: \"2023-12-06\"\ncategories: [data, analysis]\nimage: image.jpg\n---\n\n\nA Linear Regression Exercise & Visualization\n\n### Hello Class, Professor, and TA. Below is a quick exercise using code chunks in R. We will be completing a linear Regression using the \"airquality\" Dataset preloaded in R & R Studio\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and Load Necessary Packages and Libraries\n\n# Install and load these required packages be removing the # sign. \n\n#install.packages(\"caret\")\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n```{.r .cell-code}\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ purrr::lift()   masks caret::lift()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## **Basic Statistical Analysis Steps**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the syntax we use to load the \"airquality\" dataset\ndata(airquality)\n\n# Call a summary of the data\nsummary(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Ozone           Solar.R           Wind             Temp      \n Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  \n 1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  \n Median : 31.50   Median :205.0   Median : 9.700   Median :79.00  \n Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88  \n 3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  \n Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \n NA's   :37       NA's   :7                                       \n     Month            Day      \n Min.   :5.000   Min.   : 1.0  \n 1st Qu.:6.000   1st Qu.: 8.0  \n Median :7.000   Median :16.0  \n Mean   :6.993   Mean   :15.8  \n 3rd Qu.:8.000   3rd Qu.:23.0  \n Max.   :9.000   Max.   :31.0  \n                               \n```\n:::\n\n```{.r .cell-code}\n# Check the structure of the data\nstr(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t153 obs. of  6 variables:\n $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...\n $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\n $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...\n $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...\n $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n\n```{.r .cell-code}\n# We see there are some NA values, lets print information about the missing values so we can replacement them\nMissing_Values_before_Replacement <- (colSums(is.na(airquality)))\nprint(Missing_Values_before_Replacement)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R    Wind    Temp   Month     Day \n     37       7       0       0       0       0 \n```\n:::\n\n```{.r .cell-code}\n# Now that we have seen all the NA response, we will replace them with the mean for each variable\nairquality <- airquality %>%\n  mutate_all(~ ifelse(is.na(.), mean(., na.rm = TRUE), .))\n\n# Check observations for NA responses after our replacement with the mean\nMissing_values_after_replacement <- (colSums(is.na(airquality)))\nprint(Missing_values_after_replacement)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R    Wind    Temp   Month     Day \n      0       0       0       0       0       0 \n```\n:::\n\n```{.r .cell-code}\n# Set a moderate seed for reproducibility\nset.seed(123)\n\n# Now we will split the data into a training and testing datasets\nsplit_index <- createDataPartition(airquality$Temp, p = 0.7, list = FALSE)\ntrain_data <- airquality[split_index, ]\ntest_data <- airquality[-split_index, ]\n```\n:::\n\n\n## **Simple Linear Regression Example**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is how we create a simple linear regression model using the training data\nlm_model <- lm(Temp ~ Ozone, data = train_data)\n\n# This syntax allows us to make predictions based on the training data\ntrain_predictions <- predict(lm_model, newdata = train_data)\n\n# Calculate Mean Square Prediction Error (MSPE) for the training model to gauge how well it predicts\nmspe_train <- mean((train_data$Temp - train_predictions)^2)\nprint(paste(\"MSPE for Training Model:\", mspe_train))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MSPE for Training Model: 51.7474037510277\"\n```\n:::\n:::\n\n\n## **Predictions on Testing Set**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict the target variable on the testing set\ntest_predictions <- predict(lm_model, newdata = test_data)\n\n# Calculate MSPE for the test model\nmspe_test <- mean((test_data$Temp - test_predictions)^2)\nprint(paste(\"MSPE for Test Model:\", mspe_test))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MSPE for Test Model: 67.4051703292027\"\n```\n:::\n:::\n\n\n## **Visualization**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# As an extra, here is a box plot of Temperature by Month\nwith(airquality, boxplot(Temp ~ Month, col = c(1,2,3,4,5)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lastly, here is a Scatterplot of Ozone vs. Temperature\nwith(airquality, plot(Ozone ~ Temp))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}